from typing import List
import collections


class DSU:
    def __init__(self, n):
        self.p = [i for i in range(n)]
        self.sz = [1] * n

    def find(self, x):
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        px = self.find(x)
        py = self.find(y)
        self.p[px] = py
        self.sz[py] += self.sz[px]

    def size(self, x):
        return self.sz[self.find(x)]


class Solution:
    def minMalwareSpread(
        self, graph: List[List[int]], initial: List[int]
    ) -> int:
        n = len(graph)
        initial = set(initial)
        clean = [x for x in range(n) if x not in initial]

        dsu = DSU(n)
        for u in clean:
            for v in clean:
                if graph[u][v]:
                    dsu.union(u, v)

        count = collections.Counter()
        node_to_comps = {}
        for u in initial:
            comps = set()
            for v in clean:
                if graph[u][v]:
                    comps.add(dsu.find(v))
            node_to_comps[u] = comps

            for c in comps:
                count[c] += 1

        best = (-1, None)
        for u, comps in node_to_comps.items():
            score = 0
            for c in comps:
                if count[c] == 1:
                    score += dsu.size(c)
            if score > best[0] or (score == best[0] and u < best[1]):
                best = (score, u)

        return best[1]
